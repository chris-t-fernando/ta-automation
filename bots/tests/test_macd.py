import unittest
from unittest.mock import patch
import macd_bot
import pandas as pd
from parameterized import parameterized

# fmt: on
class TestBackTrade(unittest.TestCase):
    def setUp(self):
        self.test_df = pd.read_json(aapl_cross_crossback)

    def tearDown(self):
        ...

    def test_get_last_sma(self):
        expected_result = 177.271022
        test_result = macd_bot.BackTrade.get_last_sma(None, self.test_df)
        self.assertEqual(round(test_result, 6), expected_result)

    def test_get_recent_average_sma(self):
        expected_result = 177.148508
        test_result = macd_bot.BackTrade.get_recent_average_sma(None, self.test_df)
        self.assertEqual(round(test_result, 6), expected_result)

    def test_calculate_stop_loss_unit_price(self):
        expected_result = 175.6799926758
        start_date = pd.Timestamp("2022-03-31 09:30:00")
        end_date = pd.Timestamp("2022-03-31 10:25:00")
        test_result = macd_bot.BackTrade.calculate_stop_loss_unit_price(
            None, self.test_df, start_date=start_date, end_date=end_date
        )
        self.assertEqual(test_result, expected_result)

    def test_calculate_stop_loss_date(self):
        expected_result = pd.Timestamp("2022-03-31 10:00:00")
        start_date = pd.Timestamp("2022-03-31 09:30:00")
        end_date = pd.Timestamp("2022-03-31 10:25:00")
        test_result = macd_bot.BackTrade.calculate_stop_loss_date(
            None, self.test_df, start_date=start_date, end_date=end_date
        )
        self.assertEqual(test_result, expected_result)

    @parameterized.expand(
        [
            ["sma>last noignore", (10, 0), 10, 0, False],
            ["sma==last noignore", False, 10, 10, False],
            ["sma<last noignore", False, 5, 10, False],
            ["sma>last yesignore", True, 10, 0, True],
            ["sma==last yesignore", True, 10, 10, True],
            ["sma<last yesignore", True, 5, 10, True],
        ]
    )
    def test_check_sma(
        self, name, expected_result, last_sma, recent_average_sma, ignore_sma
    ):
        test_result = macd_bot.BackTrade.check_sma(
            self,
            last_sma=last_sma,
            recent_average_sma=recent_average_sma,
            ignore_sma=ignore_sma,
        )
        self.assertEqual(test_result, expected_result)

    @parameterized.expand(
        [
            ["no_end", 6, pd.Timestamp("2022-03-31 10:00:00"), None],
            [
                "with_end",
                5,
                pd.Timestamp("2022-03-31 10:00:00"),
                pd.Timestamp("2022-03-31 10:20:00"),
            ],
        ]
    )
    def test_count_intervals(self, name, expected_result, start_date, end_date):
        test_result = macd_bot.BackTrade.count_intervals(
            None,
            df=self.test_df,
            start_date=start_date,
            end_date=end_date,
        )
        self.assertEqual(test_result, expected_result)

    def test_do_backtest(self):
        self.assertEqual(False, True)

    @parameterized.expand(
        [
            [
                "2022-03-31 10:25:00",
                pd.Timestamp("2022-03-31 10:25:00"),
                pd.Timestamp("2022-03-30 15:50:00"),
                pd.Timestamp("2022-03-31 10:30:00"),
            ],
            [
                "2022-03-30 15:55:00",
                pd.Timestamp("2022-03-30 15:55:00"),
                pd.Timestamp("2022-03-30 15:50:00"),
                pd.Timestamp("2022-03-31 10:00:00"),
            ],
            [
                "not_found",
                False,
                pd.Timestamp("2022-03-30 15:30:00"),
                pd.Timestamp("2022-03-30 15:50:00"),
            ],
        ]
    )
    def test_get_blue_cycle_start(self, name, expected_result, trim_start, trim_end):
        trimmed_df = self.test_df.loc[trim_start:trim_end]
        test_result = macd_bot.BackTrade.get_blue_cycle_start(
            None,
            df=trimmed_df,
        )
        self.assertEqual(test_result, expected_result)

    def test_get_next(self):
        self.assertEqual(False, True)

    @parameterized.expand(
        [
            [
                "2022-03-31 10:25:00",
                pd.Timestamp("2022-03-31 10:25:00"),
                pd.Timestamp("2022-03-30 15:50:00"),
                pd.Timestamp("2022-03-31 10:30:00"),
            ],
            [
                "2022-03-30 15:55:00",
                pd.Timestamp("2022-03-30 15:55:00"),
                pd.Timestamp("2022-03-30 15:50:00"),
                pd.Timestamp("2022-03-31 09:25:00"),
            ],
            [
                "not_found",
                False,
                pd.Timestamp("2022-03-30 15:30:00"),
                pd.Timestamp("2022-03-30 15:50:00"),
            ],
        ]
    )
    def test_get_red_cycle_start(self, name, expected_result, trim_start, trim_end):
        trimmed_df = self.test_df.loc[trim_start:]
        test_result = macd_bot.BackTrade.get_red_cycle_start(
            None, df=trimmed_df, before_date=trim_end
        )
        self.assertEqual(test_result, expected_result)

    def test_move_to_next_interval(self):
        self.assertEqual(False, True)

    # @patch("datasources.get_jobs", autospec=True)
    # def test_get_next(self, mock_requests):
    #    ...
    # mock_requests.


fake_buy = {
    "type": "buy",
    "symbol": "XRP",
    "broker": "swyftx",
    "interval": "5m",
    "timestamp": "2022-04-FAKEFAKEFAKE",
    "signal_strength": None,
    "macd_value": -0.05596663025085036,
    "signal_value": -0.1,  # bigger signal gap
    "macd_signal_gap": -0.04403337,
    "histogram_value": 0.005450574852315156,
    "sma_value": 51.72239999771118,
    "sma_recent": 48,
    "sma_gap": 3.722399998,  # steeper climb
    "stop_loss_price": 51.975,
    "last_price": 51.63999938964844,
    "current_cycle_duration": 11,
    "target_price": 52,
    "unit_risk": 0.15,
}

# cross over
# 21/03 10:20
# fmt: off
aapl_cross_crossback = '{"Open":{"1648652400000":177.6649932861,"1648652700000":177.5399932861,"1648653000000":177.4199981689,"1648653300000":177.3827056885,"1648653600000":177.1100006104,"1648653900000":176.8800048828,"1648654200000":177.1900024414,"1648654500000":177.3099975586,"1648654800000":177.1000061035,"1648655100000":177.0899963379,"1648655400000":177.4100036621,"1648655700000":176.9799957275,"1648719000000":177.8399963379,"1648719300000":177.0800018311,"1648719600000":176.6799926758,"1648719900000":176.2299957275,"1648720200000":175.8255004883,"1648720500000":176.0099945068,"1648720800000":176.2400054932,"1648721100000":175.6799926758,"1648721400000":176.0899963379,"1648721700000":176.1799926758,"1648722000000":176.4049987793,"1648722300000":176.2899932861},"High":{"1648652400000":177.7100067139,"1648652700000":177.6300048828,"1648653000000":177.4600067139,"1648653300000":177.4199981689,"1648653600000":177.1100006104,"1648653900000":177.2200012207,"1648654200000":177.4900054932,"1648654500000":177.5449981689,"1648654800000":177.3099975586,"1648655100000":177.5899963379,"1648655400000":177.4400024414,"1648655700000":177.7899932861,"1648719000000":178.0299987793,"1648719300000":177.1499938965,"1648719600000":176.6900024414,"1648719900000":176.2400054932,"1648720200000":176.1549987793,"1648720500000":176.3600006104,"1648720800000":176.2400054932,"1648721100000":176.1000061035,"1648721400000":176.3200073242,"1648721700000":176.5265045166,"1648722000000":176.5299987793,"1648722300000":176.2899932861},"Low":{"1648652400000":177.5099945068,"1648652700000":177.3999938965,"1648653000000":177.1900024414,"1648653300000":176.9900054932,"1648653600000":176.6999969482,"1648653900000":176.8099975586,"1648654200000":177.1399993896,"1648654500000":177.1000061035,"1648654800000":176.9698944092,"1648655100000":177.0749969482,"1648655400000":176.9600067139,"1648655700000":176.9799957275,"1648719000000":177.0399932861,"1648719300000":176.6199951172,"1648719600000":175.8899993896,"1648719900000":175.6118927002,"1648720200000":175.7700042725,"1648720500000":175.7700042725,"1648720800000":175.529006958,"1648721100000":175.6799926758,"1648721400000":175.8699951172,"1648721700000":176.0702056885,"1648722000000":176.1300048828,"1648722300000":176.0500030518},"Close":{"1648652400000":177.5399932861,"1648652700000":177.4299926758,"1648653000000":177.3854980469,"1648653300000":177.1100006104,"1648653600000":176.8740997314,"1648653900000":177.1925048828,"1648654200000":177.3150024414,"1648654500000":177.1062011719,"1648654800000":177.0834960938,"1648655100000":177.4100036621,"1648655400000":176.9600067139,"1648655700000":177.7899932861,"1648719000000":177.0798950195,"1648719300000":176.6699981689,"1648719600000":176.2200012207,"1648719900000":175.8200073242,"1648720200000":176.0249938965,"1648720500000":176.2400054932,"1648720800000":175.6799926758,"1648721100000":176.0800018311,"1648721400000":176.1900024414,"1648721700000":176.4064025879,"1648722000000":176.2949981689,"1648722300000":176.2259063721},"Volume":{"1648652400000":651980,"1648652700000":708175,"1648653000000":987574,"1648653300000":1133329,"1648653600000":1092907,"1648653900000":1075802,"1648654200000":1314319,"1648654500000":1185290,"1648654800000":1047538,"1648655100000":1273237,"1648655400000":1754585,"1648655700000":2871853,"1648719000000":3566806,"1648719300000":1808826,"1648719600000":1906442,"1648719900000":2228717,"1648720200000":1583796,"1648720500000":1601319,"1648720800000":1455772,"1648721100000":1072926,"1648721400000":1249261,"1648721700000":1097881,"1648722000000":931203,"1648722300000":734527},"sma_200":{"1648652400000":176.9209934998,"1648652700000":176.9362434387,"1648653000000":176.953795929,"1648653300000":176.9710954285,"1648653600000":176.9867909241,"1648653900000":177.0068034363,"1648654200000":177.0268284607,"1648654500000":177.0466034698,"1648654800000":177.0640209198,"1648655100000":177.0840209198,"1648655400000":177.1024459839,"1648655700000":177.1253459167,"1648719000000":177.1437458801,"1648719300000":177.1600959015,"1648719600000":177.1731958771,"1648719900000":177.1838459015,"1648720200000":177.195220871,"1648720500000":177.2077758789,"1648720800000":177.216510849,"1648721100000":177.2267108917,"1648721400000":177.2379109192,"1648721700000":177.2501929474,"1648722000000":177.2610679626,"1648722300000":177.2710224915},"macd_macd":{"1648652400000":-0.1224368593,"1648652700000":-0.1537345084,"1648653000000":-0.1800529273,"1648653300000":-0.2205978895,"1648653600000":-0.2686682532,"1648653900000":-0.2778686315,"1648654200000":-0.2721384259,"1648654500000":-0.2812041676,"1648654800000":-0.286913582,"1648655100000":-0.2620709117,"1648655400000":-0.2755179105,"1648655700000":-0.2167037481,"1648719000000":-0.2248007333,"1648719300000":-0.2612810177,"1648719600000":-0.3227820681,"1648719900000":-0.3991965687,"1648720200000":-0.4381640255,"1648720500000":-0.4465488398,"1648720800000":-0.4927026502,"1648721100000":-0.4913386357,"1648721400000":-0.4758956853,"1648721700000":-0.4411105052,"1648722000000":-0.4177172208,"1648722300000":-0.4001404351},"macd_signal":{"1648652400000":-0.0456969797,"1648652700000":-0.0673044854,"1648653000000":-0.0898541738,"1648653300000":-0.116002917,"1648653600000":-0.1465359842,"1648653900000":-0.1728025137,"1648654200000":-0.1926696961,"1648654500000":-0.2103765904,"1648654800000":-0.2256839887,"1648655100000":-0.2329613733,"1648655400000":-0.2414726808,"1648655700000":-0.2365188942,"1648719000000":-0.2341752621,"1648719300000":-0.2395964132,"1648719600000":-0.2562335442,"1648719900000":-0.2848261491,"1648720200000":-0.3154937244,"1648720500000":-0.3417047474,"1648720800000":-0.371904328,"1648721100000":-0.3957911895,"1648721400000":-0.4118120887,"1648721700000":-0.417671772,"1648722000000":-0.4176808617,"1648722300000":-0.4141727764},"macd_histogram":{"1648652400000":-0.0767398796,"1648652700000":-0.0864300229,"1648653000000":-0.0901987535,"1648653300000":-0.1045949726,"1648653600000":-0.122132269,"1648653900000":-0.1050661178,"1648654200000":-0.0794687298,"1648654500000":-0.0708275772,"1648654800000":-0.0612295933,"1648655100000":-0.0291095384,"1648655400000":-0.0340452297,"1648655700000":0.0198151461,"1648719000000":0.0093745287,"1648719300000":-0.0216846045,"1648719600000":-0.0665485239,"1648719900000":-0.1143704196,"1648720200000":-0.1226703011,"1648720500000":-0.1048440923,"1648720800000":-0.1207983222,"1648721100000":-0.0955474462,"1648721400000":-0.0640835966,"1648721700000":-0.0234387332,"1648722000000":-0.000036359,"1648722300000":0.0140323413},"macd_crossover":{"1648652400000":false,"1648652700000":false,"1648653000000":false,"1648653300000":false,"1648653600000":false,"1648653900000":false,"1648654200000":false,"1648654500000":false,"1648654800000":false,"1648655100000":false,"1648655400000":false,"1648655700000":true,"1648719000000":false,"1648719300000":false,"1648719600000":false,"1648719900000":false,"1648720200000":false,"1648720500000":false,"1648720800000":false,"1648721100000":false,"1648721400000":false,"1648721700000":false,"1648722000000":false,"1648722300000":true},"macd_signal_crossover":{"1648652400000":false,"1648652700000":false,"1648653000000":false,"1648653300000":false,"1648653600000":false,"1648653900000":false,"1648654200000":false,"1648654500000":false,"1648654800000":false,"1648655100000":false,"1648655400000":false,"1648655700000":false,"1648719000000":false,"1648719300000":true,"1648719600000":false,"1648719900000":false,"1648720200000":false,"1648720500000":false,"1648720800000":false,"1648721100000":false,"1648721400000":false,"1648721700000":false,"1648722000000":false,"1648722300000":false},"macd_above_signal":{"1648652400000":false,"1648652700000":false,"1648653000000":false,"1648653300000":false,"1648653600000":false,"1648653900000":false,"1648654200000":false,"1648654500000":false,"1648654800000":false,"1648655100000":false,"1648655400000":false,"1648655700000":true,"1648719000000":true,"1648719300000":false,"1648719600000":false,"1648719900000":false,"1648720200000":false,"1648720500000":false,"1648720800000":false,"1648721100000":false,"1648721400000":false,"1648721700000":false,"1648722000000":false,"1648722300000":true},"macd_cycle":{"1648652400000":"red","1648652700000":"red","1648653000000":"red","1648653300000":"red","1648653600000":"red","1648653900000":"red","1648654200000":"red","1648654500000":"red","1648654800000":"red","1648655100000":"red","1648655400000":"red","1648655700000":"blue","1648719000000":"blue","1648719300000":"red","1648719600000":"red","1648719900000":"red","1648720200000":"red","1648720500000":"red","1648720800000":"red","1648721100000":"red","1648721400000":"red","1648721700000":"red","1648722000000":"red","1648722300000":"blue"}}'
# fmt: on
