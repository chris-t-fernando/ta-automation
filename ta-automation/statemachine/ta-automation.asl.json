{
    "Comment": "Step function to run TA",
    "StartAt": "Job scan",
    "States": {
        "Job scan": {
            "Type": "Task",
            "Resource": "${JobScanArn}",
            "Parameters": {
                "Payload.$": "$"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                }
            ],
            "Next": "Per job",
            "ResultPath": "$.jobs_scan_result"
        },
        "Per job": {
            "Type": "Map",
            "Next": "Calculate confidence",
            "Iterator": {
                "StartAt": "Get symbol data",
                "States": {
                    "Get symbol data": {
                        "Type": "Task",
                        "Resource": "${GetSymbolDataArn}",
                        "Parameters": {
                            "Payload.$": "$"
                        },
                        "Retry": [
                            {
                                "ErrorEquals": [
                                    "Lambda.ServiceException",
                                    "Lambda.AWSLambdaException",
                                    "Lambda.SdkClientException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                            }
                        ],
                        "ResultPath": "$.symbol_data",
                        "Next": "Run TA"
                    },
                    "Run TA": {
                        "Type": "Task",
                        "Resource": "${RunTAArn}",
                        "Parameters": {
                            "Payload.$": "$"
                        },
                        "Retry": [
                            {
                                "ErrorEquals": [
                                    "Lambda.ServiceException",
                                    "Lambda.AWSLambdaException",
                                    "Lambda.SdkClientException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                            }
                        ],
                        "ResultPath": "$.ta_analysis",
                        "Next": "Generate graph"
                    },
                    "Generate graph": {
                        "Type": "Task",
                        "Resource": "${GenerateGraphArn}",
                        "Parameters": {
                            "Payload.$": "$"
                        },
                        "Retry": [
                            {
                                "ErrorEquals": [
                                    "Lambda.ServiceException",
                                    "Lambda.AWSLambdaException",
                                    "Lambda.SdkClientException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                            }
                        ],
                        "ResultPath": "$.graph_url",
                        "End": true
                    }
                }
            },
            "ItemsPath": "$.jobs_scan_result"
        },
        "Calculate confidence": {
            "Type": "Task",
            "Resource": "${CalculateConfidenceArn}",
            "Parameters": {
                "Payload.$": "$"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                }
            ],
            "Next": "Is TA confidence high enough?",
            "ResultPath": "$"
        },
        "Is TA confidence high enough?": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.ta_summary.overall_ta_confidence",
                    "NumericGreaterThanEqualsPath": "$.ta_summary.target_ta_confidence",
                    "Next": "Notify"
                }
            ],
            "Default": "TA confidence is too low"
        },
        "Notify": {
            "Type": "Task",
            "Resource": "${NotifyArn}",
            "Parameters": {
                "Payload.$": "$"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                }
            ],
            "ResultPath": "$.graph_urls",
            "End": true
        },
        "TA confidence is too low": {
            "Type": "Fail",
            "Error": "ErrTAConfidenceLow",
            "Cause": "Overall TA confidence did not meet specified threshold"
        }
    }
}